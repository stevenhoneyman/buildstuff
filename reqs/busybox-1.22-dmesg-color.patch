--- a/util-linux/Config.src
+++ b/util-linux/Config.src
@@ -75,12 +75,20 @@ config FEATURE_DMESG_PRETTY
 	    BIOS-provided physical RAM map:
 	     BIOS-e820: 0000000000000000 - 000000000009f000 (usable)
 
-	  Without this option you will see:
+	  Without this option (or with -r) you will see:
 	    # dmesg
 	    <5>Linux version 2.6.17.4 .....
 	    <6>BIOS-provided physical RAM map:
 	    <6> BIOS-e820: 0000000000000000 - 000000000009f000 (usable)
 
+config FEATURE_DMESG_COLOR
+	bool "Colored dmesg output"
+	default y
+	depends on DMESG
+	help
+	  Allow to show errors and warnings in different colors
+	  dmesg -C
+
 config FBSET
 	bool "fbset"
 	default y


--- a/util-linux/dmesg.c
+++ b/util-linux/dmesg.c
@@ -11,29 +11,58 @@
 
 //usage:#define dmesg_trivial_usage
 //usage:       "[-c] [-n LEVEL] [-s SIZE]"
+//usage:	IF_FEATURE_DMESG_PRETTY(" [-r]")
+//usage:	IF_FEATURE_DMESG_COLOR(" [-C]")
 //usage:#define dmesg_full_usage "\n\n"
 //usage:       "Print or control the kernel ring buffer\n"
 //usage:     "\n	-c		Clear ring buffer after printing"
 //usage:     "\n	-n LEVEL	Set console logging level"
 //usage:     "\n	-s SIZE		Buffer size"
+//usage:	IF_FEATURE_DMESG_PRETTY(
+//usage:     "\n	-r		Show level prefix")
+//usage:	IF_FEATURE_DMESG_COLOR(
+//usage:     "\n	-C		Colored output")
 
 #include <sys/klog.h>
 #include "libbb.h"
 
+#if ENABLE_FEATURE_DMESG_COLOR
+#define COLOR_DEFAULT 0
+#define COLOR_WHITE   97
+#define COLOR_CYAN    96
+#define COLOR_MAGENTA 95
+#define COLOR_BLUE    94
+#define COLOR_YELLOW  33
+#define COLOR_GREEN   92
+#define COLOR_RED     91
+
+static void set_color(int color)
+{
+	printf("%c[%dm", 0x1B, color);
+}
+
+#else
+#define set_color(c) {}
+#endif
+
 int dmesg_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int dmesg_main(int argc UNUSED_PARAM, char **argv)
 {
 	int len, level;
 	char *buf;
 	unsigned opts;
+	int color = 0;
 	enum {
 		OPT_c = 1 << 0,
 		OPT_s = 1 << 1,
-		OPT_n = 1 << 2
+		OPT_n = 1 << 2,
+		OPT_r = 1 << 3,
+		OPT_C = 1 << 4,
+		OPT_end
 	};
 
 	opt_complementary = "s+:n+"; /* numeric */
-	opts = getopt32(argv, "cs:n:", &len, &level);
+	opts = getopt32(argv, "cs:n:rC", &len, &level);
 	if (opts & OPT_n) {
 		if (klogctl(8, NULL, (long) level))
 			bb_perror_msg_and_die("klogctl");
@@ -55,13 +81,34 @@ int dmesg_main(int argc UNUSED_PARAM, char **argv)
 		return EXIT_SUCCESS;
 
 
-	if (ENABLE_FEATURE_DMESG_PRETTY) {
+	if ((ENABLE_FEATURE_DMESG_PRETTY || (opts & OPT_C)) && !(opts & OPT_r)) {
 		int last = '\n';
 		int in = 0;
 
 		/* Skip <[0-9]+> at the start of lines */
 		while (1) {
 			if (last == '\n' && buf[in] == '<') {
+
+#if ENABLE_FEATURE_DMESG_COLOR
+				if (opts & OPT_C) {
+					char *lvl = buf + in + 1;
+					sscanf(lvl, "%d", &level);
+
+					switch (level) {
+					case 1:
+					case 2:
+					case 3: color = COLOR_RED;    break;
+					case 4: color = COLOR_YELLOW; break;
+					case 5: color = COLOR_CYAN;   break;
+					case 6: color = COLOR_WHITE;  break;
+					case 7: /* common dmesg info */
+					default:
+						color = COLOR_DEFAULT;
+					}
+
+					set_color(color);
+				}
+#endif
 				while (buf[in++] != '>' && in < len)
 					;
 			} else {
@@ -82,5 +129,9 @@ int dmesg_main(int argc UNUSED_PARAM, char **argv)
 
 	if (ENABLE_FEATURE_CLEAN_UP) free(buf);
 
+	/* Reset default terminal color */
+	if (color)
+		set_color(0);
+
 	return EXIT_SUCCESS;
 }
